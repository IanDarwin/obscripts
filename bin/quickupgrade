#!/bin/ksh -u

# quickupdate -- quickly update base files from snapshot

echo "WARNING: $0 has been supplanted by sysupgrade in 6.5" >&2

# Tries to implement some of the advice in
# https://www.openbsd.org/faq/upgrade64.html#NoInstKern

# Set defaults before getopt...

ARCH=`uname -m`
DEST=/
BASE=YES
X=NO
KERNEL=YES
VERBOSE=""
SYSMERGE=YES
BACKUP=NO

. ~ian/obscripts/obrel

DIR=snapshots

EXT=tgz

DOWNLOAD=~ian/pub/OpenBSD		# base dir for finding dist sets

USAGE="$0 [-a arch][-d dest][-k][-m][-v]"

function usage {		# give usage message, and exit
	echo "Usage: $USAGE
	[-v]	add -v to 'tar x' command.
	[-a arch]	i386, sparc, etc. [${ARCH}]
	[-b bootDisk]	sd0, wd0, etc. - if omitted, don't run new installboot
	[-d dest]	Desination dir [${DEST}]
	[-e]	exec format has changed, backup executables first
	[-k]	do not include kernel [do]
	[-p]	prefix for finding download files [/usr/download || ~ftp]
	[-r]	use snapshot [use release]
	[-m]	Don't run sysmerge when done [do]" 2>&1
	exit 1
}

BOOT_DISK="not set"

while getopts "a:b:d:eh:kmp:rsxv" opt 
do 
 	 case "$opt" in 
		a)	ARCH=${OPTARG};;
		b)	BOOT_DISK=${OPTARG};;
		d)	DEST=${OPTARG};;
		e)	BACKUP=YES;;
		k)	KERNEL=NO;;
		m)	SYSMERGE=NO;;
		p)	DOWNLOAD=${OPTARG};;
		r)	DIR=${RELDIR};;	# stable, not snapshots
		v)	VERBOSE='v';;
		*)	usage;;
	esac
done
shift `expr $OPTIND - 1`		 # leave just filenames

if [ -d ${DOWNLOAD}/${DIR}/${ARCH} ]; then
	cd ${DOWNLOAD}/${DIR}/${ARCH} || exit
elif [ -d ~ftp/pub/OpenBSD/${DIR}/${ARCH} ]; then
	 cd ~ftp/pub/OpenBSD/${DIR}/${ARCH} || exit
else
	echo "Can't find sets" >&2
	exit 1
fi

# Check this AFTER getopts so -h works without sudo
if [ ! -w ${DEST} ]; then
	echo "$0: Need write permission on ${DEST}"
	exit 1
fi

echo "Are you sure this is going to work? Is it running the current kernel?"
echo -n "At the very least, have you opened a ROOT window on $(hostname) (afterwards is too late)? "

read answer junk
case ${answer} in
	y*)	;;
	*)	exit 1;;
esac

ls -l 
echo -n "quickupgrade from ${PWD} on `hostname` to ${DEST} on $(hostname)? [nyq]"
read ans
case ${ans} in
	y*)	;;
	*)	exit 1;;
esac

signify -Cp /etc/signify/openbsd-${REL}-base.pub -x SHA256.sig *.tgz install*.iso

if [ "$KERNEL" = "YES" ]; then
	if [ -f bsd ]; then
				k="$(if [ -f bsd.mp -a "$(sysctl hw.ncpu)" != 'hw.ncpu=1' ]; then echo bsd.mp; else echo bsd; fi)"
echo $k
				mv ${DEST}/bsd ${DEST}/obsd && cp ${k} ${DEST}/bsd && echo Kernel $k installed as ${DEST}/bsd
				sha256 -h /var/db/kernel.SHA256 /bsd
	else
		echo "File ./bsd not found, not installing /bsd" >&2
	fi
else
	echo "-k specified, not installing kernel." >&2
fi

# NEVER include etc in this list, or you will die horribly!
BDIRS="comp man xbase"
XDIRS="xfont xserv xshare"
# do baseXX last because of tar failures when incompatible change
DIRS="${BDIRS} ${XDIRS} base"

# This one backup step we do anyway, just in case
cp /sbin/reboot /sbin/oreboot
echo Old reboot backed up as /sbin/oreboot.

for f in ${DIRS}
do
	FILE="${f}${REL}.${EXT}"
	if [ -f ${FILE} ]; then
		echo "===> `pwd`/$f (${FILE})" >&2
	else
		echo "Cannot locate file ${FILE}"
		exit
	fi
	(cd ${DEST} || exit; tar xzpf${VERBOSE} - ) < ${FILE}
done

echo "Rebuilding /dev..."
cd ${DEST}/dev; sh MAKEDEV all

if [ "${BOOT_DISK}" != "" ]; then
	echo installboot ${BOOT_DISK}
	installboot ${BOOT_DISK}
fi

if [ "$SYSMERGE" = "YES" ]; then
	sysmerge
else
	echo "No -m, not running sysmerge" >&2
fi

if [ -r ${DEST}/upgrade.site ]; then
	echo "Running ${DEST}/upgrade.site" >&2
	cd ${DEST}
	sh ./upgrade.site
fi
